<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sWhite</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>path = path_add()
redChasing = false

//scale_sprite(desiredWidth,desiredHeight)


//enemy variables
cellHealth = 3

cellState = "idle"
pathCounter = 0

walkListenRange = 65
bulletListenRange = 400
siteRange = 1000
siteSize = 120
cellFree = false

checkDirectionTime = 1
checkDirectionCounter = 0

countValue = 0

playerX = 0
playerY = 0

lastShot = 60
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Cell Control



/* Moving */
cellWalkSpeed = 150/room_speed
cellRunSpeed = 200/room_speed
hitWall = false


facing = image_angle

if(image_angle &gt; 360){
    image_angle -= 360
} else if (image_angle &lt;= 0) {
    image_angle += 360
}

image_angle = direction

if (distance_to_object(oPlayer) &lt; walkListenRange &amp;&amp; global.playerMoving == true &amp;&amp; cellFree == true)
{
    update_player_xy()
    
    pathCounter = 0
    
    cellState = "searching"
}

if ((distance_to_object(oPlayer) &lt; bulletListenRange) &amp;&amp; oPlayer.lastShot == 0) &amp;&amp; cellFree == true 
{
    update_player_xy()

    pathCounter = 0

    cellState = "searching"
}

goPlayer = true


inSite = false
if i_have_line_of_sight_to(oPlayer,siteRange,siteSize) &amp;&amp; cellFree == true
{
    inSite = true
    cellState = "chase"
    
    look_at(oPlayer)
    update_player_xy()
    
    goPlayer = false
    pathCounter = 0
}

if cellState == "chase" {

    speed = cellRunSpeed

    with oDoor {
        if oDoor.countValue == 1{
            instance_destroy()
        }
    }

    if pathCounter == 1 &amp;&amp; goPlayer == true
    {
        if (mp_grid_path(global.grid, path, x, y, playerX, playerY, 1)) {
            path_start(path, speed, path_action_stop, true)
        }
    } else {
        speed = 0
    }

    pathCounter += 1
    if i_have_line_of_sight_to(oPlayer,siteRange,siteSize) == false 
    {
        cellState = "searching"
    }

    if (lastShot &gt;= 20) &amp;&amp; goPlayer == false
    {
        path_end()
        direction = point_direction(x,y,playerX,playerY)
        myBullet = instance_create(x,y,oLethalBullet)
        myBullet.direction = point_direction(x,y,playerX,playerY)
        myBullet.speed = 1000/room_speed
        myBullet.facing = myBullet.direction
        lastShot = 0
    }

    if distance_to_point(playerX,playerY) &lt; 15 &amp;&amp; inSite = false
    {
        cellState = "goStation"
        pathCounter = 0
    }
}

lastShot += 60/room_speed

if cellState == "idle" {
    
    speed = 0

    if redChasing == true 
    {
        with (oDoor)
        {
            instance_destroy()
        }
        
        pathCounter = 0
        cellState = "goStation"
        oGrid.updateGrid = true
    }


    pathCounter += 1
}
if cellState == "goStation" {

    speed = cellWalkSpeed

    if pathCounter == 5 {
        if (mp_grid_path(global.grid, path, x, y, oStation.x, oStation.y, 1)) 
        {
            path_start(path, speed, path_action_stop, true)
        }
    }
    pathCounter += 1
    cellFree = true
    if (x == oStation.x &amp;&amp; y == oStation.y) { //(x == playerX &amp;&amp; y == playerY) {
        cellState = "stationed"
        pathCounter = 0
        onStation = instance_position(x,y,oStation)
    }


}
if cellState == "searching"{

    cellState = search_for_player(cellRunSpeed,"searching","goStation")
    
}
if cellState == "stationed" {
    pathCounter += 1
    direction = oStation.image_angle
    speed = 0
}
incomingBullet = instance_place(x,y,oBullet)

if instance_exists(incomingBullet) {
    with incomingBullet {
        instance_destroy()
    }

    cellHealth -= 1
}
if cellHealth &lt;= 0 {
    instance_destroy()
}




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self()
draw_set_colour(c_blue);
draw_circle(playerX, playerY, 10, true);

draw_set_colour(c_green);
draw_circle(x, y, walkListenRange, true);

draw_set_colour(c_yellow);
draw_circle(x, y, bulletListenRange, true);

draw_set_colour(c_purple)
Range = siteRange
Vision = siteSize/2


var x1 = x + lengthdir_x(Range, image_angle - Vision)
var y1 = y + lengthdir_y(Range, image_angle - Vision)
var x2 = x + lengthdir_x(Range, image_angle + Vision)
var y2 = y + lengthdir_y(Range, image_angle + Vision)

draw_triangle(x,y,x1,y1,x2,y2,true)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
