<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sPlayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Variables Declared Once

global.playerMoving = false

dodgeCounter = 0
lastDirection = 'Q'
lastShot = 0
lastDodge = 60
canMove = true
canDodge = false
canDodge = false
fireRate = room_speed/6 // number of bullets fired every second

playerState = "normal"

slowCounter = 0

playerHealth = 9
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Player Controls

/* Player Movement */

//variables

slowModifier = 0.4
walkSpeed = 200/room_speed
dodgeSpeed = 600/room_speed
dodgeTime = 250/room_speed
dodgeCooldown = 30
slowDuration = 2

playerHeight = sprite_get_height(oPlayer)
playerWidth = sprite_get_width(oPlayer)

//counters

dodgeCounter += 100/room_speed
lastDodge += 60/room_speed

// DODGING

if (lastDodge &gt; dodgeTime){
    canMove = true
    canDodge = false
}

if (canMove == true &amp;&amp; lastDodge &gt; dodgeCooldown ){
    if keyboard_check_pressed(ord('W')){
        if (dodgeCounter &lt; 50 &amp;&amp; lastDirection == 'W'){
            canDodge = true
            lastDodge = 0
        }
        dodgeCounter = 0
        lastDirection = 'W'
    }
    if keyboard_check_pressed(ord('S')){
        if (dodgeCounter &lt; 50 &amp;&amp; lastDirection == 'S' ){
            canDodge = true
            lastDodge = 0
        }
        dodgeCounter = 0
        lastDirection = 'S'
    }
    if keyboard_check_pressed(ord('A')){
        if (dodgeCounter &lt; 50 &amp;&amp; lastDirection == 'A'){
            canDodge = true  
            lastDodge = 0    
        }
        dodgeCounter = 0
        lastDirection = 'A'
    }
    if keyboard_check_pressed(ord('D')){
        if (dodgeCounter &lt; 50 &amp;&amp; lastDirection == 'D'){
            canDodge = true
            lastDodge = 0
        }
        dodgeCounter = 0
        lastDirection = 'D'
    }
}

//MOVING

//if (canMove == true){
speed = 0
if keyboard_check(ord('W')){
    vspeed = -walkSpeed;
}
if keyboard_check(ord('S')){
    vspeed = +walkSpeed;
}
if keyboard_check(ord('A')){
    hspeed = -walkSpeed;
}
if keyboard_check(ord('D')){
    hspeed = +walkSpeed;
}

if (canDodge == true &amp;&amp; lastDodge &lt;= dodgeTime){
    if (lastDirection == 'W'){
        vspeed = -dodgeSpeed;
    }
    if (lastDirection == 'S'){
        vspeed = +dodgeSpeed;
    }
    if (lastDirection == 'A'){
        hspeed = -dodgeSpeed;
    }
    if (lastDirection == 'D'){
        hspeed = +dodgeSpeed;
    }
}

if place_meeting(x+hspeed,y+vspeed,oWallE) {
    
    oldHSpeed = hspeed
    hspeed = 0
    while 
    place_meeting (x+hspeed + sign(oldHSpeed),y,oWallE) = false &amp;&amp; abs(hspeed) &lt; abs(oldHSpeed)
    {
        hspeed = hspeed + sign(oldHSpeed)
    }
    
    oldVSpeed = vspeed
    vspeed = 0
    while
    place_meeting (x,y+vspeed+sign(oldVSpeed),oWallE) = false &amp;&amp; abs(vspeed) &lt; abs(oldVSpeed)
    {
        vspeed = vspeed + sign(oldVSpeed)
    }
}

//}

//FACING

facing = point_direction(x,y,mouse_x,mouse_y)

/* Shooting */

lastShot += 1

if (mouse_check_button(mb_left) &amp;&amp; lastShot &gt;= fireRate) 
{
    myBullet = instance_create(x,y,oBullet)
    myBullet.direction = facing
    myBullet.speed = 1500/room_speed
    myBullet.facing = facing
    lastShot = 0
}

incomingSlowBullet = instance_place(x,y,oSlowBullet)

if instance_exists(incomingSlowBullet) {
    with incomingSlowBullet {
        instance_destroy()
    }
    playerHealth -= 0
    playerState = "slow"
}

incomingLethalBullet = instance_place(x,y,oLethalBullet)

if instance_exists(incomingLethalBullet) {
    with incomingLethalBullet {
        instance_destroy()
    }
    playerHealth -= 0
}

if playerHealth &lt;= 0 {
    instance_destroy()
}

if playerState == "slow" 
{
    if slowCounter &lt;= slowDuration {
        speed *= slowModifier
        slowCounter += 1/room_speed
    } else {
        slowCounter = 0
        playerState = "normal"
    }
}

global.playerMoving = false
if speed != 0
{
    global.playerMoving = true
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
draw_sprite_ext(sprite_index,image_index,x,y,image_xscale,image_yscale,facing,image_blend,image_alpha)
/*draw_set_halign(fa_center)
draw_set_valign(fa_middle)
draw_text (x, y - 32,oEnemy.enemyState)
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
